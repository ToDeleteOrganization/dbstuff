# This is just a test properties file. The real storage-mongo.properties file will be in the configuration management project.
# In your local environment, put these under tomcat/conf/bcms/ folder.

bcm.mongodb.replica.set=${bcm.mongodb.replica.set}
bcm.mongodb.write.concern=${bcm.mongodb.write.concern}
bcm.mongodb.database=${bcm.mongodb.database}
mongo.single.host=${mongo.host}
mongo.single.port=${mongo.port}
bcm.mongodb.ping=600000


#The amount of physical connections a single Mongo instance (it's singleton so you usually have one per application) can establish to a mongod/mongos process.
#At time of writing the java driver will establish this amount of connections eventually even if the actual query throughput is low
#(in order words you will see the "conn" statistic in mongostat rise until it hits this number per app server).
mongo.connectionsPerHost=200


#Number of threads that are allowed to wait for connections to become available if the pool is currently exhausted.
#This is the setting that will cause the "com.mongodb.DBPortPool$SemaphoresOut: Out of semaphores to get db connection" exception.
#It will throw this exception once this thread queue exceeds the threadsAllowedToBlockForConnectionMultiplier value.
mongo.threadsAllowedToBlockForConnectionMultiplier=50

#As the name suggest number of milliseconds the driver will wait before a connection attempt is aborted.
#Set timeout to something long (15-30 seconds) unless there's a realistic, expected chance this will be in the way of otherwise succesfull connection attempts.
#Normally if a connection attempt takes longer than a couple of seconds your network infrastructure isn't capable of high throughput.
mongo.connectTimeout=10000

#Number of ms a thread will wait for a connection to become available on the connection pool, and raises an exception if this does not happen in time. Rec: Keep default :).
mongo.maxWaitTime=10000

#Means the driver will automatically attempt to reconnect to the server(s) after unexpected disconnects.
#In production environments you usually want this set to true.
mongo.autoConnectRetry=true

#The keep alive flag, controls whether or not to have socket keep alive timeout. Defaults to false.
mongo.socketKeepAlive=true

#Standard socket timeout value. Set to 60 seconds (60000).
mongo.socketTimeout=60000

#Very important for increased read performance if you use replica sets.
#This basically allows mongo to direct reads to non-primary replica members, spreading the read load. Note that this can also be configured per query in your code.
#If you use replica sets (and you should) and you can live with eventual consistency issues (meaning your secondaries might be slightly behind the primary's state) enable this.
mongo.slaveOk=true

mongo.numberOfReplicas=${mongo.numberOfReplicas}